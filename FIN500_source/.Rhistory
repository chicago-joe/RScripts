tic.clear()
}
# END  --------------------------------------------------------------------
# -------------------------------------------------------------------------
plot(chi.list)
# OPTIONAL: Inverse Transform Method 2 ----------------------------------------------
# uses default calculation for option price: V = e^(-r*T) * max(0, K - St)
for (j in 1:no_of_simulations)
{
Xt = inverse_transform_method()
stock_prices.list[j] = s0 * exp(Xt)
put_prices.list[j] = exp(-r * T) * max(0, strike - stock_prices.list[j])
}
# Method 2 Result
sum(stock_prices.list) / no_of_simulations
put.prc.fft2 <- sum(put_prices.list) / no_of_simulations
# Output both methods to table:
# note both methods should output very similar results:
values.table <- cbind(put_prc.InvT, put.prc.fft2)
values.table
# RQuantLib benchmarking -----------------------------------------------------
# Use the EuropeanOption function of RQuantLib to calculate the Black-Scholes
# price of the European Put (all inputs are identical to the NIG inputs above, except volatility)
library(RQuantLib)
q = 0.0
# QuantLib Price of the European Put option using Black-Scholes
# to be compared with the FFT price and the PC-Parity Price
quantlib.bsm.put.prc <-
EuropeanOption(
type = "put",
underlying = s0,
strike = strike,
dividendYield = q,
riskFreeRate = r,
maturity = 0.5,
volatility = 0.19
)
put_prices <- cbind(put.prc.fft1, quantlib.bsm.put.prc)
print("NIG Put Price vs Black-Scholes:")
put_prices
NULL?
?
{}
null?
??
?NULL
NULL
NULL(py)
f<- function()  {
## this is an empty function
}
f()
?doBY
??do
??doBY
install.packages("doBY")
?doBy
??doBy
install.packages("doBy")
library(doBy)
?doby
?doBy
?bind
?copy
?copy()
?multiscale
??multiscale
"a" + "b"
a + b
"a" + " b"
'%-%' <- function(a, b) { return(paste(a, b))}
'%-%' ("a", " b")
x <- 5
f1 <- function(x) {
function()  {
x + 6
}
f1(3)()
y <- 5; f<- function(x) { y<-2; y^2 + g(x)}; g<- function(x) { x + y }
f(4)
x<-0
y<-10
f<- function() {
x<-1
g()
}
g<-function() {
x<-2
h()
}
h<- function() {
x<-3
x + y
}
f()
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is not an error!"))
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is not an error!"))
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is not an error!"))
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is not an error!"))
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is not an error!"))
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is not an error!"))
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is not an error!"))
fun1 <- function(a, b, c, ...){ ans <- 2; ans}
s <- fun1(1,2,3,4,5,6,7,8)
s
??uniPlot
"%UpWork%" <- function(x, y) {upw <- x + y; upw}
ans <- c(1,2)%UpWorkc(2,3)
ans
"%UpWork%" <- function(x, y) {upw <- x + y; upw}
ans <- c(1,2)%UpWorkc(2,3)
ans
"%UpWork%" <- function(x, y) {upw <- x + y; upw}
ans <- c(1,2)%UpWork%c(2,3)
ans
x = "I love R Programming"
library(stringr)
str_to_title(x)
?trace
?traceback
?trace
??gzfile
?gzfile
a = array(c(0:1, 1:0), dim=c(2,2))
a %*% a
?m2
??M2
?M2
a <- vector()
a
?names
x <- c(0,1,2,3,4,5,6,7)
dim(x) <- c(2,2,2)
x[,2,]
x<- c(0,1,2,3,4,5,6,7,8,9)
x[-(1:3)]
a<- array(0:7, dim=c(2,2,2))
b<-a%*%a
b[1]
v<-seq(0)
v<-seq(0,3)
v.factor()
data.matr()
library(FinancialMath)
(P x I) x ((1 + r)n)/ (t x ((1 + r)n)- 1)
t = 5
salary = 1500
savings = 0.2 * salary
clothes = (salary - savings)*0.1
salary - savings - clothes
item = 100
sales = .1*100
sales = .1*item
tax = 0.4*item
profit = sales - tax
profit
sales = 1.1*item
sales = 1.1
tax = 0.4
item*sales - item*tax
??depreciate
x<-c(8, 14, 3, 9, 15, 5, 5, 21, 6, 8)
x==median(x)
x<-c(8, 14, 3, 9, 15, 5, 5, 21, 6, 8)
x==median(x)&x>15
x<-c(8, 14, 3, 9, 15, 5, 5, 21, 6, 8)
x==median(x)|x>15
for (i in 1:4 * 5) {
for (j in 1:15) {
# specific arguments for loop...
}
for (i in 1:4 * 5) {
for (j in 1:15) {
x=1
}
x
for (i in 1:4 * 5) {
for (j in 1:15) {
print(x=1)
}
for (i in 1:4 * 5) {
for (j in 1:15) {
print(i+1))
}
for (i in 1:4 * 5) {
for (j in 1:15) {
print(i+1)
}
for (i in 1:4 * 5) {
for (j in 1:15) {
print(x+1)
}
for (i in 1:4 * 5) {
for (j in 1:15) {
print(+1)
}
for (i in 1:4 * 5) {
for (j in 1:15) {
print(x += 1+ x)
}
for (i in 1:4 * 5) {
for (j in 1:15) {
print(+=1)
}
for (i in 1:4 * 5) {
for (j in 1:15) {
print()
}
for (i in 1:4 * 5) {
for (j in 1:15) {
print(x)
}
for (i in 1:4 * 5) {
for (j in 1:15) {
print(x+1)
}
for (i in 1:4 * 5) {
for (j in 1:15) {
print(x+=1)
}
for (i in 1:4 * 5) {
for (j in 1:15) {
print(sum+1)
}
for (i in 1:4 * 5) {
for (j in 1:15) {
print(sum+1)
}
for (i in 1:4 * 5) {
for (j in 1:15) {
sum = 0
print(sum+1)
}
for (i in 1:4 * 5) {
for (j in 1:15) {
sum = sum +1
print(sum)
}
x2<-ifelse(x1<0, 1, -1)
x1 = x0
x1 = 0
x2<-ifelse(x1<0, 1, -1)
x1 = 0
x2
if(x1<0){x2<-0}
x2
x1
x1[x2==-1]<-0
x2
x2<-rep(-1, length(x1)); x2[x1<0]<-1
x2
x1<-0.5
if(x1<0){x2<-0}
x1<-0.5
x2
x1
x1[x2==-1]<-0
x2
x1
x2<-rep(-1, length(x1)); x2[x1<0]<-1
x2
x1
x2[x1<0]<-1; x2[x1>=0]<--1
x2
x1
x2[x1<0]<-1; x2[x1>=0]<--1
x2
x3 = x2[x1<0]<-1; x2[x1>=0]<--1
x3
x3 = x1[x2==-1]<-0
x2
x1
x3
x2
x0
print(x2[x1<0]<-1; x2[x1>=0]<--1)
print(x2[x1<0]<-1; x2[x1>=0]<--1))
print(x2[x1<0]<-1)
print(x2[x1>=0]<--1)
x3
print(x1[x2==-1]<-0)
sd?
x2<-rep(-1, length(x1)); x2[x1<0]<-1
?sd
function<-substr(x,4, 7)
test=substr(x,4, 7)
x='noone'
test
x='highnoonexact'
test
x=highnoonexact
x='schooner'
test
print(substr(x,4,7))
x='noone'
print(substr(x,4,7))
??aggregate
aggregate(x = x)
?aggregate
y=(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
y<-(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
y<-[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
y=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
y <- c(0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1)
x <- c(39, 64, 75, 34, 22, 50, 54, 65, 72, 33, 59, 41, 65, 72, 56, 61)
library(stats)
?regression
??regression
library(glm)
library(quantreg)
reg<-glm(y~x,family=binomial)
odds.ratio(reg)
install.packages("odds.ratio")
OddsRatio(reg)
install.packages("OddsRatio")
install.packages("oddsratio")
library(oddsratio)
oddsratio(reg)
oddsratio::data_glm(reg)
oddsratio::data_glm
oddsratio::or_glm(x,reg)
oddsratio::or_glm(y,reg)
oddsratio::or_glm(reg,x)
oddsratio::or_glm(x,reg)
oddsratio::or_glm(y,reg)
oddsratio::or_glm(reg)
y <- c(0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1)
x <- c(39, 64, 75, 34, 22, 50, 54, 65, 72, 33, 59, 41, 65, 72, 56, 61)
library(stats)
library(quantreg)
reg<-glm(y~x,family=binomial)
OddsRatio(reg)
reg<-glm(data=y~x,family=binomial)
reg<-glm(y~x,family=binomial,data=data)
reg<-glm(y~x,family=binomial,data)
View(reg)
print(reg)
oddsratio(reg)
oddsratio::or_glm(reg)
oddsratio::or_glm(reg,glm(y~x,family=binomial))
glm.fit(x,y)
reg
probabilities <- predict(model.results, type = "response")
probabilities <- predict(reg.results, type = "response")
probabilities <- predict(reg, type = "response")
1 - mean(abs(probabilities - binary.outcome))
1 - mean(abs(probabilities))
1 - mean(abs(probabilities - [0,1]))
1 - mean(abs(probabilities - rep(0,1)))
1 - mean(abs(probabilities - rep(1)))
1 - mean(abs(probabilities - rep(1,1)))
1 - mean(abs(probabilities - rep(1,2)))
1 - mean(abs(probabilities - 1 or 2))
1 - mean(abs(probabilities - (1 or 2))
1 - mean(abs(probabilities - (0 & 1))
1 - mean(abs(probabilities - (0 & 1)))
1 - mean(abs(probabilities - (0 && 1)))
1 - mean(abs(probabilities - (1)))
1 - mean(abs(probabilities - (0)))
1-.4375
1-.5625
1-.5
0.5-.4375
.4375*2
.5625+.43
glm.fit(reg)
glm.fit(x,y,weights = 1)
glm.fit(x,y,weights = 1,family = binomial)
glm.fit(x,y,family = binomial)
glm.fit(x,y,weights = 1)
summary(reg)
anova(reg)
summary(anova(reg))
100-12.13
100-14.58
100-7.25
predict(reg)
mean(predict(reg))
mean(abs(predict(reg))
mean(abs(predict(reg)))
mean((predict(reg)))
(predict(reg)
predict(reg)
100-predict(reg)
mean(100-predict(reg))
fitted(reg)
reg<-lm(y~x,family=binomial)
y <- c(0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1)
x <- c(39, 64, 75, 34, 22, 50, 54, 65, 72, 33, 59, 41, 65, 72, 56, 61)
library(stats)
library(quantreg)
reg<-lm(y~x,family=binomial)
oddsratio::or_lm(reg,glm(y~x,family=binomial))
glm.fit(x,y)
g
lm.fit(x,y)
lm.fit(reg,y)
reg
probabilities <- predict(reg, type = "response")
1 - mean(abs(probabilities))
library(help="stats")
x=c(49,66,50,54,58,38,67,43)
y1=c(1,1,0,1,0,1,0,0)
y2=c(0,0,1,1,0,1,0,0)
y3=c(0,1,0,1,0,1,1,1)
y4=c(1,0,0,1,1,1,0,1)
y5=c(1,1,0,0,0,1,1,1)
tapply(x,y1,mean)
tapply(x,y3,mean)
tapply(x,y4,mean)
plot(x = x3, y = y3)
abline(v = mean(x3), lty = "dashed")
library(AER)
data(CPS1988)
attach(CPS1988)
fitLm1 = lm(wage ~ education + experience + ethnicity)
resid1 = rstudent(fitLm1)
plot(fitLm1$fit, resid1,
ylim = c(-1500, 1500), main = "(a)")
lines(lowess(fitLm1$fit, resid1, f = 0.2), lwd = 5, col = "red")
abline(h = 0, col = "blue", lwd = 5)
plot(fitLm1$fit, abs(resid1),
ylim = c(0, 1500), main = "(b)")
lines(lowess(fitLm1$fit, abs(resid1), f = 0.2),
lwd = 5, col = "red")
abline(h = mean(abs(resid1)), col = "blue", lwd = 5)
library(AER)
data(CPS1988)
attach(CPS1988)
fitLm1 = lm(wage ~ education + experience + ethnicity)
resid1 = rstudent(fitLm1)
plot(fitLm1$fit, resid1,
ylim = c(-1500, 1500), main = "(a)")
lines(lowess(fitLm1$fit, resid1, f = 0.2), lwd = 5, col = "red")
abline(h = 0, col = "blue", lwd = 5)
plot(fitLm1$fit, abs(resid1),
ylim = c(0, 1500), main = "(b)")
lines(lowess(fitLm1$fit, abs(resid1), f = 0.2),
lwd = 5, col = "red")
abline(h = mean(abs(resid1)), col = "blue", lwd = 5)
plot(fitLm1$fit, resid1,
main = "(a)")
lines(lowess(fitLm1$fit, resid1, f = 0.2), col = "red")
abline(h = 0, col = "blue")
resid1 = rstudent(fitLm1)
plot(fitLm1$fit, resid1,
main = "(a)")
lines(lowess(fitLm1$fit, resid1, f = 0.2), col = "red")
abline(h = 0, col = "blue")
x = c("4th", "5th", "4th", NA, "", "6th", "5th", "5th")
factor(x)
x = c("4th" "5th" "4th" NA "" "6th" "5th" "5th")
x = factor("4th" "5th" "4th" NA "" "6th" "5th" "5th")
dim(x)
factor(x,levels=c("4th,5th,6th"))
dim(x%*%y)
x=[2][3]
x=data.frame(2,3)
x
dim(x)
x=data.frame(4,6)
dim(x)
x=data.frame(6,4)
dim(x)
x=matrix(1:2,ncol = 3)
dim(x)
x=matrix(1:3,ncol = 3)
dim(x)
x=matrix(2:3,ncol = 3)
dim(x)
x<-1:8
dim(x)
dim(x)<-c(2,3)
dim(x)<-c(2,3,3)
dim(x)<-c(2,3,2)
dim(x)<-c(2,3,1)
dim(x)<-c(2,3,1,1)
x=5
dim(x)<-c(2,3)
dim(x)<-c(2,2)
dim(x)<-c(2,2,1)
dim(x)<-c(2,2,2)
x=1:5
dim(x)<-c(2,2,1)
dim(x)<-c(2,3)
x=1:6
dim(x)<-c(2,3)
y=6:1
dim(y)<-c(3,2)
dim(x%*%y)
setwd("C:/Users/jloss/OneDrive - University of Illinois - Urbana/FY 2018-2019/Fall 2018/FIN500/FIN500_sourcecode")
