sd(JPYdiff)
skewness(JPYdiff)
kurtosis(JPYdiff)
## Dale W.R. Rosenthal, 2018
## You are free to distribute and use this code so long as you attribute
## it to me or cite the text.
## The legal disclaimer in _A Quantitative Primer on Investments with R_
## applies to this code.  Use or distribution without these comment lines
## is forbidden.
## to do
library(xts)
library(Quandl)
library(moments)
Quandl.api_key('iVyBuKymy_j_R7Xxze9t')
# Read in spot fx rates
fxspot.tickers <- c("CURRFX/USDEUR", "CURRFX/USDJPY", "CURRFX/USDCHF")
fxspot.raw <- Quandl(fxspot.tickers[1], type="xts")
for (i in 2:length(fxspot.tickers)) {
fxspot.temp <- Quandl(fxspot.tickers[i], type="xts")
fxspot.raw <- merge(fxspot.raw, fxspot.temp)
}
fxspot<-cbind(fxspot.raw$Rate,fxspot.raw$Rate.1,fxspot.raw$Rate.2)
colnames(fxspot) <- c("USDEUR.spot", "USDJPY.spot", "USDCHF.spot")
# Read in future fx rates
fxfut.tickers <- c("CHRIS/CME_EC1", "CHRIS/CME_JY1", "CHRIS/CME_SF1")
fxfut.raw <- Quandl(fxfut.tickers[1], type="xts")
for (i in 2:length(fxfut.tickers)) {
fxfut.temp <- Quandl(fxfut.tickers[i], type="xts")
fxfut.raw <- merge(fxfut.raw, fxfut.temp)
}
fxfut<-cbind(fxfut.raw$Settle,fxfut.raw$Settle.1,fxfut.raw$Settle.2)
colnames(fxfut) <- c("USDEUR.fut", "USDJPY.fut", "USDCHF.fut")
# Read in 3M USD deposit futures
usd.3m.raw <- Quandl("CHRIS/CME_ED1", type="xts")[,"Settle"]
eur.3m.raw <- Quandl("CHRIS/LIFFE_I1", type="xts")[,"Settle"]
jpy.3m.raw <- Quandl("CHRIS/TFX_JBA1", type="xts")[,"Settle"]
chf.3m.raw <- Quandl("CHRIS/LIFFE_S1", type="xts")[,"Settle"]
chf.3m.raw["20150122"] <- 101.08  # Fix 1st data error
chf.3m.raw["20150508"] <- 100.83  # Fix 2nd data error
deposits3m.raw <- cbind(usd.3m.raw, eur.3m.raw, jpy.3m.raw, chf.3m.raw)
deposits3m <- (100-deposits3m.raw)/100  # convert futures prices to yield
colnames(deposits3m) <- c("3MUSDLIBOR", "3MCHFLIBOR", "3MJPYTIBOR", "3MEURIBOR")
alldata.full <- cbind(fxspot, fxfut, deposits3m)
alldata <- alldata.full["20141001/20181001"]
alldata<-na.omit(alldata)
# JPY
JPYdiff<-(alldata$X3MUSDLIBOR-alldata$USDJPY.spot*alldata$X3MJPYTIBOR/alldata$USDJPY.fut)
colnames(JPYdiff)<-"JPYdiff"
mean(JPYdiff)
sd(JPYdiff)
skewness(JPYdiff)
kurtosis(JPYdiff)
USDJPY.parity<-JPYdiff
## Dale W.R. Rosenthal, 2018
## You are free to distribute and use this code so long as you attribute
## it to me or cite the text.
## The legal disclaimer in _A Quantitative Primer on Investments with R_
## applies to this code.  Use or distribution without these comment lines
## is forbidden.
library(xts)
library(Quandl)
library(quantmod)
Quandl.api_key('iVyBuKymy_j_R7Xxze9t')
# Get risk-free rate
rf.raw <- Quandl("FRED/DGS3MO", type="xts")/100
colnames(rf.raw) <- c("T3M")
# Get S&P 500, Russell 2000, and stock returns
adj.close <- 6  # 6th field is adjusted close
equity.tickers <- c("^GSPC","^RUT","BA","GD","HON","LMT","NOC","QCOM","RTN","UTX")
prices <- getSymbols(equity.tickers[1], source="yahoo", auto.assign=FALSE,
return.class="xts")[,adj.close]
for (i in 2:length(equity.tickers)) {
prices.tmp <- getSymbols(equity.tickers[i], source="yahoo",
auto.assign=FALSE, return.class="xts")[,adj.close]
prices <- cbind(prices, prices.tmp)
}
equity.names <- c("SPX","RUT","BA","GD","HON","LMT","NOC","QCOM","RTN","UTX")
colnames(prices) <- equity.names
returns <- diff(log(prices))
# Now we join all of the datasets together and trim to recent
alldata <- cbind(rf.raw, returns)["20141001/20181001"]
# create excess returns
equity.names.xs <- paste(equity.names, ".xs", sep="")
# now in a for loop subtract off a daily risk-free rate, for example:
alldata1<-alldata
for (i in 2:11)
{
alldata1[,i] <- alldata[,i] - alldata$T3M/250
}
alldata1.names <- c("T3M","SPX.xs","RUT.xs","BA.xs","GD.xs","HON.xs","LMT.xs","NOC.xs","QCOM.xs","RTN.xs","UTX.xs")
colnames(alldata1) <- alldata1.names
alldata1_new<-alldata1[,2:11]
alldata<-cbind(alldata,alldata1_new)
summary(alldata)
## Dale W.R. Rosenthal, 2018
## You are free to distribute and use this code so long as you attribute
## it to me or cite the text.
## The legal disclaimer in _A Quantitative Primer on Investments with R_
## applies to this code.  Use or distribution without these comment lines
## is forbidden.
## to do
library(xts)
library(Quandl)
library(moments)
Quandl.api_key('iVyBuKymy_j_R7Xxze9t')
# Read in spot fx rates
fxspot.tickers <- c("CURRFX/USDEUR", "CURRFX/USDJPY", "CURRFX/USDCHF")
fxspot.raw <- Quandl(fxspot.tickers[1], type="xts")
for (i in 2:length(fxspot.tickers)) {
fxspot.temp <- Quandl(fxspot.tickers[i], type="xts")
fxspot.raw <- merge(fxspot.raw, fxspot.temp)
}
fxspot<-cbind(fxspot.raw$Rate,fxspot.raw$Rate.1,fxspot.raw$Rate.2)
colnames(fxspot) <- c("USDEUR.spot", "USDJPY.spot", "USDCHF.spot")
# Read in future fx rates
fxfut.tickers <- c("CHRIS/CME_EC1", "CHRIS/CME_JY1", "CHRIS/CME_SF1")
fxfut.raw <- Quandl(fxfut.tickers[1], type="xts")
for (i in 2:length(fxfut.tickers)) {
fxfut.temp <- Quandl(fxfut.tickers[i], type="xts")
fxfut.raw <- merge(fxfut.raw, fxfut.temp)
}
fxfut<-cbind(fxfut.raw$Settle,fxfut.raw$Settle.1,fxfut.raw$Settle.2)
colnames(fxfut) <- c("USDEUR.fut", "USDJPY.fut", "USDCHF.fut")
# Read in 3M USD deposit futures
usd.3m.raw <- Quandl("CHRIS/CME_ED1", type="xts")[,"Settle"]
eur.3m.raw <- Quandl("CHRIS/LIFFE_I1", type="xts")[,"Settle"]
jpy.3m.raw <- Quandl("CHRIS/TFX_JBA1", type="xts")[,"Settle"]
chf.3m.raw <- Quandl("CHRIS/LIFFE_S1", type="xts")[,"Settle"]
chf.3m.raw["20150122"] <- 101.08  # Fix 1st data error
chf.3m.raw["20150508"] <- 100.83  # Fix 2nd data error
deposits3m.raw <- cbind(usd.3m.raw, eur.3m.raw, jpy.3m.raw, chf.3m.raw)
deposits3m <- (100-deposits3m.raw)/100  # convert futures prices to yield
colnames(deposits3m) <- c("3MUSDLIBOR", "3MCHFLIBOR", "3MJPYTIBOR", "3MEURIBOR")
alldata.full <- cbind(fxspot, fxfut, deposits3m)
alldata <- alldata.full["20141001/20181001"]
summary(alldata)
alldata<-na.locf(alldata)
summary(alldata)
alldata$X3MEURIBOR<-na.locf(alldata$X3MEURIBOR)
summary(alldata$X3MEURIBOR)
USDJPY.parity<-(alldata$X3MUSDLIBOR-alldata$USDJPY.spot*alldata$X3MJPYTIBOR/alldata$USDJPY.fut)
colnames(USDJPY.parity)<-"USDJPY.parity"
mean(USDJPY.parity)
sd(USDJPY.parity)
skewness(USDJPY.parity)
kurtosis(USDJPY.parity)
plot.xts(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="blue",lwd=1.2)
plot.xts(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="blue",lwd=1.4)
plot.xts(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="blue",lwd=1.6)
plot.xts(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="blue",lwd=3)
plot.xts(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="blue",lwd=2)
plot.xts(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=2)
USDJPY.eurodollar<-alldata$X3MUSDLIBOR
USDJPY.conversion<-alldata$USDJPY.spot*alldata$X3MJPYTIBOR/alldata$USDJPY.fut
lines(alldata$X3MUSDLIBOR,col = "blue",lwd=2)
View(alldata)
# JPY
USDJPY.parity<-(alldata$X3MUSDLIBOR-(alldata$USDJPY.spot*alldata$X3MJPYTIBOR/alldata$USDJPY.fut))
colnames(USDJPY.parity)<-"USDJPY.parity"
mean(USDJPY.parity)
sd(USDJPY.parity)
skewness(USDJPY.parity)
kurtosis(USDJPY.parity)
USDJPY.eurodollar<-alldata$X3MUSDLIBOR
USDJPY.conversion<-alldata$USDJPY.spot*alldata$X3MJPYTIBOR/alldata$USDJPY.fut
plot.xts(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1)+
lines(USDJPY.eurodollar,col = "blue",lwd=1)
plot.xts(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1)+
lines(alldata$X3MUSDLIBOR,col = "blue",lwd=1)
plot.xts((USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1),+
lines(alldata$X3MUSDLIBOR,col = "blue",lwd=1))
plot.xts(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1)+
lines(alldata$X3MUSDLIBOR,col = "blue",lwd=1)
plot.xts(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1)
lines(alldata$X3MUSDLIBOR,col = "blue",lwd=1)
plot.ts(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1)
lines(alldata$X3MUSDLIBOR,col = "blue",lwd=1)
plot.new(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1)
lines(alldata$X3MUSDLIBOR,col = "blue",lwd=1)
plot.new()
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1)
lines(alldata$X3MUSDLIBOR,col = "blue",lwd=1)
install.packages("xtsExtra")
library(astsa)
library(ts)
library(xts)
library(tseries)
library(fBasics)
library(Hmisc)
library(latticeExtra)
library(prettyunits)
library(quantmod)
library(plotly)
library("purrr", lib.loc="~/R/win-library/3.5")
library("purrr")
library("styler")
library("viridis")
pretty.default(USDJPY.parity)
plot.new()
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1,ylim=c(0.15,0.20))
plot.new(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1)
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1)
abline(h=pretty(c(par("yaxp")[1],par("yaxp")[2]),n=par("yaxp")[3]),col="gray60",lty=3)
plot.ts(USDJPY.parity)
plot.ts(USDJPY.parity,plot.type = "multiple")
USDJPY.eurodollar<-alldata$X3MUSDLIBOR
USDJPY.conversion<-alldata$USDJPY.spot*alldata$X3MJPYTIBOR/alldata$USDJPY.fut
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1)+
lines(alldata$X3MUSDLIBOR,col = "blue",lwd=1)
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1)
lines(alldata$X3MUSDLIBOR,col = "blue",lwd=1)
lines(USDJPY.conversion,col="purple")
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1,log="y")
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1,ylim=c(0.005,0.020),log="y")
# set up the plot
plot(USDJPY.conversion, type="n", xlab="Age (days)",
ylab="Circumference (mm)" )
# set up the plot
plot(USDJPY.conversion, type="c", xlab="Age (days)",
ylab="Circumference (mm)" )
# set up the plot
plot(USDJPY.conversion, type="h", xlab="Age (days)",
ylab="Circumference (mm)" )
plot.new()
# set up the plot
plot(USDJPY.parity, type="h", xlab="Age (days)",
ylab="Circumference (mm)" )
plot_ly(USDJPY.parity)
library(ggplot2)
ggplot2::quickplot(USDJPY.parity)
ggplot2::quickplot(USDJPY.parity,type="l")
test<-scale(USDJPY.parity)
plot.xts(test)
??plot.xts
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=2,ylog="y")
lines(USDJPY.eurodollar,col = "blue",lwd=2)
lines(USDJPY.conversion,col="purple",lwd=2)
??par
plot.new()
## Dale W.R. Rosenthal, 2018
## You are free to distribute and use this code so long as you attribute
## it to me or cite the text.
## The legal disclaimer in _A Quantitative Primer on Investments with R_
## applies to this code.  Use or distribution without these comment lines
## is forbidden.
## to do
library(xts)
library(Quandl)
library(moments)
Quandl.api_key('iVyBuKymy_j_R7Xxze9t')
# Read in spot fx rates
fxspot.tickers <- c("CURRFX/USDEUR", "CURRFX/USDJPY", "CURRFX/USDCHF")
fxspot.raw <- Quandl(fxspot.tickers[1], type="xts")
for (i in 2:length(fxspot.tickers)) {
fxspot.temp <- Quandl(fxspot.tickers[i], type="xts")
fxspot.raw <- merge(fxspot.raw, fxspot.temp)
}
fxspot<-cbind(fxspot.raw$Rate,fxspot.raw$Rate.1,fxspot.raw$Rate.2)
colnames(fxspot) <- c("USDEUR.spot", "USDJPY.spot", "USDCHF.spot")
# Read in future fx rates
fxfut.tickers <- c("CHRIS/CME_EC1", "CHRIS/CME_JY1", "CHRIS/CME_SF1")
fxfut.raw <- Quandl(fxfut.tickers[1], type="xts")
for (i in 2:length(fxfut.tickers)) {
fxfut.temp <- Quandl(fxfut.tickers[i], type="xts")
fxfut.raw <- merge(fxfut.raw, fxfut.temp)
}
fxfut<-cbind(fxfut.raw$Settle,fxfut.raw$Settle.1,fxfut.raw$Settle.2)
colnames(fxfut) <- c("USDEUR.fut", "USDJPY.fut", "USDCHF.fut")
# Read in 3M USD deposit futures
usd.3m.raw <- Quandl("CHRIS/CME_ED1", type="xts")[,"Settle"]
eur.3m.raw <- Quandl("CHRIS/LIFFE_I1", type="xts")[,"Settle"]
jpy.3m.raw <- Quandl("CHRIS/TFX_JBA1", type="xts")[,"Settle"]
chf.3m.raw <- Quandl("CHRIS/LIFFE_S1", type="xts")[,"Settle"]
chf.3m.raw["20150122"] <- 101.08  # Fix 1st data error
chf.3m.raw["20150508"] <- 100.83  # Fix 2nd data error
deposits3m.raw <- cbind(usd.3m.raw, eur.3m.raw, jpy.3m.raw, chf.3m.raw)
deposits3m <- (100-deposits3m.raw)/100  # convert futures prices to yield
colnames(deposits3m) <- c("3MUSDLIBOR", "3MCHFLIBOR", "3MJPYTIBOR", "3MEURIBOR")
alldata.full <- cbind(fxspot, fxfut, deposits3m)
alldata <- alldata.full["20141001/20181001"]
alldata<-na.locf(alldata)
# JPY
USDJPY.parity<-(alldata$X3MUSDLIBOR-((alldata$USDJPY.spot*alldata$X3MJPYTIBOR)/alldata$USDJPY.fut))
colnames(USDJPY.parity)<-"USDJPY.parity"
mean(USDJPY.parity)
sd(USDJPY.parity)
skewness(USDJPY.parity)
kurtosis(USDJPY.parity)
# JPY
USDJPY.parity<-(alldata$X3MUSDLIBOR-(alldata$USDJPY.spot*alldata$X3MJPYTIBOR/alldata$USDJPY.fut))
colnames(USDJPY.parity)<-"USDJPY.parity"
mean(USDJPY.parity)
sd(USDJPY.parity)
skewness(USDJPY.parity)
kurtosis(USDJPY.parity)
USDJPY.eurodollar<-alldata$X3MUSDLIBOR
USDJPY.conversion<-alldata$USDJPY.spot*alldata$X3MJPYTIBOR/alldata$USDJPY.fut
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=2,ylog="y")
lines(USDJPY.eurodollar,col = "blue",lwd=2)
lines(USDJPY.conversion,col="purple",lwd=2)
lines(USDJPY.eurodollar,col = "blue",lwd=3)
lines(USDJPY.conversion,col="green",lwd=3)
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=3)
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1,lty=2)
lines(USDJPY.eurodollar,col = "blue",lwd=1)
lines(USDJPY.conversion,col="green",lwd=1)
lines(USDJPY.conversion,col="green",lwd=3)
USDJPY.conversion=alldata$USDJPY.spot*alldata$X3MJPYTIBOR/alldata$USDJPY.fut
lines(USDJPY.conversion,col="green",lwd=3)
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=1,lty=2)
lines(USDJPY.eurodollar,col = "blue",lwd=1)
lines(USDJPY.conversion,col="red",lwd=3)
plot.new()
lines(USDJPY.conversion,col="red",lwd=3)
plot.new()
plot.xts(USDJPY.conversion)
plot.xts(USDJPY.eurodollar)
USDJPY.eurodollar - USDJPY.parity
plot.xts(USDJPY.eurodollar)
plot.xts(USDJPY.conversion)
plot.xts(USDJPY.conversion,USDJPY.parity)
plot.new()
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=2,lty=2)
lines(USDJPY.eurodollar,col = "blue",lwd=2)
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=2,lty=2)
lines(USDJPY.eurodollar,col = "blue",lwd=1)
panel.points.ts(USDJPY.conversion)
??plot.xts
plot.new()
mfrow(2,1)
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=2,lty=2)
lines(USDJPY.eurodollar,col = "blue",lwd=1)
legend("topright", inset=.02, legend=c("USDJPY.parity","3MUSDLIBOR"), fill=c("red","blue"), cex=0.5)
legend.show()
legend("left",c("DNORM","KDE"),fill=c("blue","red"),cex=1.1)
plot.xts(USDJPY.eurodollar)
USDJPY.eurodollar - USDJPY.parity
legend("left",c("DNORM","KDE"),fill=c("blue","red"),cex=1.1)
+legend("left",c("DNORM","KDE"),fill=c("blue","red"),cex=1.1)
plot.xts(USDJPY.eurodollar)+legend("left",c("DNORM","KDE"),fill=c("blue","red"),cex=1.1)
plot.xts(USDJPY.eurodollar)+
legend("left",c("DNORM","KDE"),fill=c("blue","red"),cex=1.1)
plot.new()
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=2,lty=2)
par(lines(USDJPY.eurodollar,col = "blue",lwd=1)+legend("left",c("DNORM","KDE"),fill=c("blue","red"),cex=1.1))
par(lines(USDJPY.eurodollar,col = "blue",lwd=1)+legend("left",c("Diff","Eurodollar"),fill=c("red","blue"),cex=1.1))
par(lines(USDJPY.eurodollar,col = "blue",lwd=1)+legend("left",c("Parity Diff","Eurodollar"),fill=c("red","blue"),cex=1.1))
lines(USDJPY.eurodollar,col = "blue",lwd=1)
par(legend("left",c("Parity Diff","Eurodollar"),fill=c("red","blue"),cex=1.1))
+legend("left",c("Parity Diff","Eurodollar"),fill=c("red","blue"),cex=1.1)
legend("left",c("Parity Diff","Eurodollar"),fill=c("red","blue"),cex=1.1)
legend("left",c("ParityDiff","Eurodollar"),fill=c("red","blue"),cex=1.1)
legend(left)
plot()
plot.new()
??plot
?plot
?plot.default
legend("left",c("ParityDiff","Eurodollar"),col=1:2,cex=1.1)
legend("left",c("ParityDiff","Eurodollar"),col=c("red","blue"),cex=1.1)
legend("left",c("ParityDiff","Eurodollar"),col=par("red","blue"),cex=1.1)
legend("left",c("ParityDiff","Eurodollar"),col=par("red","blue"),cex=1.1,fill = TRUE)
legend("left",c("ParityDiff","Eurodollar"),col=par("red","blue"),cex=1.1,fill = par("red","blue"))
legend("left",c("ParityDiff","Eurodollar"),col=par("red","blue"),cex=1.1,fill = c("red","blue"))
legend("topright", inset=.02, legend=c("NDist","KDE"), fill=c("grey","blue"), cex=0.5)
plot.new()
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=2,lty=2)
lines(USDJPY.eurodollar,col = "blue",lwd=1)
legend("left",c("ParityDiff","Eurodollar"),col=par("red","blue"),cex=1.1,fill = c("red","blue"))
legend("left",c("ParityDiff","Eurodollar"),cex=1.1,fill = c("red","blue"))
View(alldata)
# Ch22
df = read.table(file="C:\\Users\\jloss\\Desktop\\hw3.csv", header = TRUE,sep=",")
# par[1]is p, par[2]is L
min.RSS <- function(data, par) {
with(df, sum(((((1-par[1])^T+(1-par[2]))/(1+Rf)^T)-B/1000))^2)
}
result <- optim(par = c(0, 0), fn = min.RSS,lower=c(0, 0), upper=c(1, 1), data = df,method="L-BFGS-B")
result$par
result$value
# Ch22
df = read.table(file="C:\\Users\\jloss\\Desktop\\hw3.csv", header = TRUE,sep=",")
# Ch22
df = read.table(file="C:\Users\jloss\Desktop\hw3.csv", header = TRUE,sep=",")
# Ch22
df = read.table(file="C:\\Users\\jloss\\Desktop\\hw3.csv", header = TRUE,sep=",")
library(readr)
df <- read_csv("hw3v2.csv")
View(df)
# par[1]is p, par[2]is L
min.RSS <- function(data, par) {
with(df, sum(((((1-par[1])^T+(1-par[2]))/(1+Rf)^T)-B/1000))^2)
}
result <- optim(par = c(0, 0), fn = min.RSS,lower=c(0, 0), upper=c(1, 1), data = df,method="L-BFGS-B")
result$par
result$value
# par[1]is p, par[2]is L
min.RSS <- function(data, par) {
with(df, sum(((((1-par[1])^T+(1-par[2]))/(1+rf)^T)-b/1000))^2)
}
result <- optim(par = c(0, 0), fn = min.RSS,lower=c(0, 0), upper=c(1, 1), data = df,method="L-BFGS-B")
result$par
result$value
# par[1]is p, par[2]is L
min.RSS <- function(data, par) {
with(df, sum(((((1-par[1])^T+(1-par[2]))/(1+rf)^T)-b/1000))^2)
}
result <- optim(par = c(0, 0), fn = min.RSS,lower=c(0, 0), upper=c(1, 1), data = df,method="L-BFGS-B")
table(df)
df=table(df)
result <- optim(par = c(0, 0), fn = min.RSS,lower=c(0, 0), upper=c(1, 1), data = df,method="L-BFGS-B")
result$par
result$value
# Ch22
df = read.csv2(file="C:\\Users\\jloss\\Desktop\\hw3.csv", header = TRUE,sep=",")
# Ch22
df = read.csv2(file="C:\\Users\\jloss\\OneDrive - University of Illinois - Urbana\\FIN500\\HW3\\hw3v2.csv", header = TRUE,sep=",")
# par[1]is p, par[2]is L
min.RSS <- function(data, par) {
with(df, sum(((((1-par[1])^T+(1-par[2]))/(1+rf)^T)-b/1000))^2)
}
result <- optim(par = c(0, 0), fn = min.RSS,lower=c(0, 0), upper=c(1, 1), data = df,method="L-BFGS-B")
View(df)
na.omit(df)
df=table[1,4]
df=table(1,4)
# Ch22
df = read.csv2(file="C:\\Users\\jloss\\OneDrive - University of Illinois - Urbana\\FIN500\\HW3\\hw3v2.csv", header = TRUE,sep=",")
View(df)
df[4]
df[1:4]
df[1:4,4]
df[1:4,4:]
df[1,:4]
df[1,1:4]
df[1,4:4]
df[1:4,1:4]
df<-df[1:4,1:4]
min.RSS <- function(data, par) {
with(df, sum(((((1-par[1])^T+(1-par[2]))/(1+rf)^T)-b/1000))^2)
}
result <- optim(par = c(0, 0), fn = min.RSS,lower=c(0, 0), upper=c(1, 1), data = df,method="L-BFGS-B")
min.RSS <- function(df, par) {
with(df, sum(((((1-par[1])^T+(1-par[2]))/(1+rf)^T)-b/1000))^2)
}
result <- optim(par = c(0, 0), fn = min.RSS,lower=c(0, 0), upper=c(1, 1), data = df,method="L-BFGS-B")
with(df, sum(((((1-par[1])^t+(1-par[2]))/(1+rf)^t)-b/1000))^2)
min.RSS <- function(data, par) {
with(df, sum(((((1-par[1])^t+(1-par[2]))/(1+rf)^t)-b/1000))^2)
}
result <- optim(par = c(0, 0), fn = min.RSS,lower=c(0, 0), upper=c(1, 1), data = df,method="L-BFGS-B")
result$par
result$value
df=table(df)
## Dale W.R. Rosenthal, 2018
## You are free to distribute and use this code so long as you attribute
## it to me or cite the text.
## The legal disclaimer in _A Quantitative Primer on Investments with R_
## applies to this code.  Use or distribution without these comment lines
## is forbidden.
## to do
library(xts)
library(Quandl)
library(moments)
Quandl.api_key('iVyBuKymy_j_R7Xxze9t')
# Read in spot fx rates
fxspot.tickers <- c("CURRFX/USDEUR", "CURRFX/USDJPY", "CURRFX/USDCHF")
fxspot.raw <- Quandl(fxspot.tickers[1], type="xts")
for (i in 2:length(fxspot.tickers)) {
fxspot.temp <- Quandl(fxspot.tickers[i], type="xts")
fxspot.raw <- merge(fxspot.raw, fxspot.temp)
}
fxspot<-cbind(fxspot.raw$Rate,fxspot.raw$Rate.1,fxspot.raw$Rate.2)
colnames(fxspot) <- c("USDEUR.spot", "USDJPY.spot", "USDCHF.spot")
# Read in future fx rates
fxfut.tickers <- c("CHRIS/CME_EC1", "CHRIS/CME_JY1", "CHRIS/CME_SF1")
fxfut.raw <- Quandl(fxfut.tickers[1], type="xts")
for (i in 2:length(fxfut.tickers)) {
fxfut.temp <- Quandl(fxfut.tickers[i], type="xts")
fxfut.raw <- merge(fxfut.raw, fxfut.temp)
}
fxfut<-cbind(fxfut.raw$Settle,fxfut.raw$Settle.1,fxfut.raw$Settle.2)
colnames(fxfut) <- c("USDEUR.fut", "USDJPY.fut", "USDCHF.fut")
# Read in 3M USD deposit futures
usd.3m.raw <- Quandl("CHRIS/CME_ED1", type="xts")[,"Settle"]
eur.3m.raw <- Quandl("CHRIS/LIFFE_I1", type="xts")[,"Settle"]
jpy.3m.raw <- Quandl("CHRIS/TFX_JBA1", type="xts")[,"Settle"]
chf.3m.raw <- Quandl("CHRIS/LIFFE_S1", type="xts")[,"Settle"]
chf.3m.raw["20150122"] <- 101.08  # Fix 1st data error
chf.3m.raw["20150508"] <- 100.83  # Fix 2nd data error
deposits3m.raw <- cbind(usd.3m.raw, eur.3m.raw, jpy.3m.raw, chf.3m.raw)
deposits3m <- (100-deposits3m.raw)/100  # convert futures prices to yield
colnames(deposits3m) <- c("3MUSDLIBOR", "3MCHFLIBOR", "3MJPYTIBOR", "3MEURIBOR")
alldata.full <- cbind(fxspot, fxfut, deposits3m)
alldata <- alldata.full["20141001/20181001"]
alldata<-na.locf(alldata)
# JPY
USDJPY.parity<-(alldata$X3MUSDLIBOR-(alldata$USDJPY.spot*alldata$X3MJPYTIBOR/alldata$USDJPY.fut))
colnames(USDJPY.parity)<-"USDJPY.parity"
mean(USDJPY.parity)
sd(USDJPY.parity)
skewness(USDJPY.parity)
kurtosis(USDJPY.parity)
USDJPY.eurodollar<-alldata$X3MUSDLIBOR
USDJPY.conversion=alldata$USDJPY.spot*alldata$X3MJPYTIBOR/alldata$USDJPY.fut
plot.new()
mfrow(2,1)
plot(USDJPY.parity,main="USD/JPY Interest Rate Parity",ylab="interest rate",col="red",lwd=2,lty=2)
par(lines(USDJPY.eurodollar,col = "blue",lwd=1)+legend("left",c("Parity Diff","Eurodollar"),fill=c("red","blue"),cex=1.1))
lines(USDJPY.eurodollar,col = "blue",lwd=1)
legend(left)
legend("left",c("ParityDiff","Eurodollar"),cex=1.1,fill = c("red","blue"))
