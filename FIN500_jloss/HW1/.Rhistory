# Create your groups of size (group 1, 2, 3, 4, 5) and use ggplot2-----
# Use ggplot2 "Legends" function to plot the different groups for each metric plot
#p <- ggplot(newdata, aes(`Size`, `AvgRealizedSpread`)) + geom_point(aes(colour = color))p + guides(col = guide_legend(nrow = 8))
sp <- c()
ye <- c()
supp<-c()
for (zipfile in files2grab) {
exdata <- read.csv(zipfile, header=FALSE, sep="|")
colnames(exdata) <- field.names
newdata <-subset(exdata, !is.na(`ShrWtdAtQuoteTime`))
#unlink(temp)
a<-min(newdata$Size)
b<-max(newdata$Size)
# do some calculations across subgroups and store results
# You can subset the data like so:
#marketableorders.idx <- exdata$Immediacy == 11 | exdata$Immediacy == 12
#mean(exdata$AvgRealizedSpread[marketableorders.idx])
for (i in a:b) {
sp<-c(sp,mean(newdata$ShrWtdAtQuoteTime[newdata$Size == i]))
supp <-c(supp,i)
ye<-c(ye,mean(newdata$CCYYMM))
}
}
#exdata <- read.csv("M200204.dat", header=FALSE, sep="|")
#colnames(exdata) <- field.names
#unlink(temp)
# do some calculations across subgroups and store results
# You can subset the data like so:
df <- data.frame(ShrWtdAtQuoteTime=sp,
date=ye,size=supp)
# Change the color
p<-ggplot(df, aes(x=date, y=ShrWtdAtQuoteTime, color=size,group=size)) +
geom_line(size=1.0)+
geom_point(size=1.0)
p + labs(x = "Date", y = "Time", title = "Share-weighted Avg. Time (Order-to-Execute)") +
scale_color_brewer(palette = "Set1")
#p+scale_color_manual(values=c("green"))
# x.axis: Months (in order)...(Jan - Feb - Mar - Apr.)
# y.axis: Metric (avg.spread, avg.effspread, share.w_avg.time - 1 per plot!!)
# Create your groups of size (group 1, 2, 3, 4, 5) and use ggplot2-----
# Use ggplot2 "Legends" function to plot the different groups for each metric plot
#p <- ggplot(newdata, aes(`Size`, `AvgRealizedSpread`)) + geom_point(aes(colour = color))p + guides(col = guide_legend(nrow = 8))
## Dale W.R. Rosenthal, 2018
## You are free to distribute and use this code so long as you attribute
## it to me or cite the text.
## The legal disclaimer in _A Quantitative Primer on Investments with R_
## applies to this code.  Use or distribution without these comment lines
## is forbidden.
# The fields in an 11Ac1-5 execution quality report
library(ggplot2)
library(RColorBrewer)
field.names <- c("Participant", "MktCenter", "CCYYMM", "Symbol", "Immediacy",
"Size", "NumCoveredOrds", "ShrsCoveredOrds", "CxldShrsCoveredOrds",
"FillShrsCoveredOrds", "AwayShrsCoveredOrds", "Shrs0to9s",
"Shrs10to29s", "Shrs30to59s", "Shrs60to299s", "Shrs5to30m",
"AvgRealizedSpread", "AvgEffectiveSpread", "ShrsPriceImprove",
"ShrWtdPriceImproved", "ShrWtdPriceImproveTime",
"ShrsFilledAtQuote", "ShrWtdAtQuoteTime", "ShrsFilledOutsideQuote",
"ShrWtdOutsideQuotePriceDiff", "ShrWtdOutsideQuoteTime")
# These give the meaning of coded fields in the report
field.participants <- list(A="Amex", B="BSE", M="CHX", C="CSE", T="NASD",
N="NYSE", P="PCX", X="Phlx")
field.sizes <- list("21"="100-499", "22"="500-1999", "23"="2000-4999", "24"="5000+")
field.immediacy <- list("11"="Market", "12"="Marketable limit", "13"="Inside limit",
"14"="At-quote limit", "15"="Near-quote limit")
files2grab <- c("M200204.dat","M200205.dat","M200206.dat","M200207.dat","M200208.dat","M200209.dat","M200210.dat","M200211.dat","M2002012.dat",
"M200301.dat","M200302.dat","M200303.dat","M200304.dat","M200305.dat","M200306.dat","M200307.dat","M200308.dat","M200309.dat","M200310.dat","M200311.dat","M200312.dat",
"M200401.dat","M200402.dat","M200403.dat","M200404.dat","M200405.dat","M200406.dat","M200407.dat","M200408.dat","M200409.dat","M200410.dat","M200411.dat","M200412.dat",
"M200501.dat","M200502.dat","M200503.dat","M200504.dat","M200505.dat","M200506.dat","M200507.dat","M200508.dat","M200509.dat","M200510.dat","M200511.dat","M200512.dat",
"M200601.dat","M200602.dat","M200603.dat","M200604.dat","M200605.dat","M200606.dat","M200607.dat","M200608.dat","M200609.dat","M200610.dat","M200611.dat","M200612.dat",
"M200701.dat","M200702.dat","M200703.dat","M200704.dat","M200705.dat","M200706.dat","M200707.dat","M200708.dat","M200709.dat","M200710.dat","M200711.dat","M200712.dat",
"M200801.dat","M200802.dat","M200803.dat","M200804.dat","M200805.dat","M200806.dat","M200807.dat","M200808.dat","M200809.dat","M200810.dat","M200811.dat","M200812.dat",
"M200901.dat","M200902.dat","M200903.dat","M200904.dat","M200905.dat","M200906.dat","M200907.dat","M200908.dat","M200909.dat","M200910.dat","M200911.dat","M200912.dat",
"M201001.dat","M201002.dat","M201003.dat","M201004.dat","M201005.dat","M201006.dat","M201007.dat","M201008.dat","M201009.dat","M201010.dat","M201011.dat","M201012.dat",
"M201101.dat","M201102.dat","M201103.dat","M201104.dat","M201105.dat","M201106.dat","M201107.dat","M201108.dat","M201109.dat","M201110.dat","M201111.dat","M201112.dat",
"M201201.dat","M201202.dat","M201203.dat","M201204.dat","M201205.dat","M201206.dat","M201207.dat","M201208.dat","M201209.dat","M201210.dat","M201211.dat","M201212.dat",
"M201301.dat","M201302.dat","M201303.dat","M201304.dat","M201305.dat","M201306.dat","M201307.dat","M201308.dat","M201309.dat","M201310.dat","M201311.dat","M201312.dat",
"M201401.dat","M201402.dat","M201403.dat","M201404.dat","M201405.dat","M201406.dat","M201407.dat","M201408.dat","M201409.dat","M201410.dat","M201411.dat","M201412.dat",
"M201501.dat","M201502.dat","M201503.dat","M201504.dat","M201505.dat","M201506.dat","M201507.dat","M201508.dat","M201509.dat","M201510.dat","M201511.dat","M201512.dat",
"M201601.dat","M201602.dat","M201603.dat","M201604.dat","M201605.dat","M201606.dat","M201607.dat","M201608.dat","M201609.dat","M201610.dat","M201611.dat","M201612.dat",
"M201701.dat","M201702.dat","M201703.dat","M201704.dat","M201705.dat","M201706.dat","M201707.dat","M201708.dat","M201709.dat","M201710.dat","M201711.dat","M201712.dat",
"M201801.dat","M201802.dat","M201803.dat","M201804.dat")
sp <- c()
ye <- c()
supp<-c()
for (zipfile in files2grab) {
exdata <- read.csv(zipfile, header=FALSE, sep="|")
colnames(exdata) <- field.names
newdata <-subset(exdata, !is.na(`AvgRealizedSpread`))
#unlink(temp)
a<-min(newdata$Size)
b<-max(newdata$Size)
# do some calculations across subgroups and store results
# You can subset the data like so:
#marketableorders.idx <- exdata$Immediacy == 11 | exdata$Immediacy == 12
#mean(exdata$AvgRealizedSpread[marketableorders.idx])
for (i in a:b) {
sp<-c(sp,mean(newdata$AvgRealizedSpread[newdata$Size == i]))
supp <-c(supp,i)
ye<-c(ye,mean(newdata$CCYYMM))
}
}
#exdata <- read.csv("M200204.dat", header=FALSE, sep="|")
#colnames(exdata) <- field.names
#unlink(temp)
# do some calculations across subgroups and store results
# You can subset the data like so:
df <- data.frame(AvgRealizedSpread=sp,
date=ye,size=supp)
# Change the color
p<-ggplot(df, aes(x=date, y=AvgRealizedSpread, color=size,group=size)) +
geom_line(size=1.0)+
geom_point(size=1.0)
p + labs(x = "Date", y = "REAL-Spread", title = "Avg. Realized Spread") +
scale_color_brewer(palette = "Set1")
#p+scale_color_manual(values=c("green"))
# x.axis: Months (in order)...(Jan - Feb - Mar - Apr.)
# y.axis: Metric (avg.spread, avg.effspread, share.w_avg.time - 1 per plot!!)
# Create your groups of size (group 1, 2, 3, 4, 5) and use ggplot2-----
# Use ggplot2 "Legends" function to plot the different groups for each metric plot
#p <- ggplot(newdata, aes(`Size`, `AvgRealizedSpread`)) + geom_point(aes(colour = color))p + guides(col = guide_legend(nrow = 8))
sp <- c()
ye <- c()
supp<-c()
for (zipfile in files2grab) {
exdata <- read.csv(zipfile, header=FALSE, sep="|")
colnames(exdata) <- field.names
newdata <-subset(exdata, !is.na(`AvgEffectiveSpread`))
#unlink(temp)
a<-min(newdata$Size)
b<-max(newdata$Size)
# do some calculations across subgroups and store results
# You can subset the data like so:
#marketableorders.idx <- exdata$Immediacy == 11 | exdata$Immediacy == 12
#mean(exdata$AvgRealizedSpread[marketableorders.idx])
for (i in a:b) {
sp<-c(sp,mean(newdata$AvgEffectiveSpread[newdata$Size == i]))
supp <-c(supp,i)
ye<-c(ye,mean(newdata$CCYYMM))
}
}
#exdata <- read.csv("M200204.dat", header=FALSE, sep="|")
#colnames(exdata) <- field.names
#unlink(temp)
# do some calculations across subgroups and store results
# You can subset the data like so:
df <- data.frame(AvgEffectiveSpread=sp,
date=ye,size=supp)
# Change the color
p<-ggplot(df, aes(x=date, y=AvgEffectiveSpread, color=size,group=size)) +
geom_line(size=1.0)+
geom_point(size=1.0)
p + labs(x = "Date", y = "EFF-Spread", title = "Avg. Effective Spread") +
scale_color_brewer(palette = "Set2")
#p+scale_color_manual(values=c("green"))
# x.axis: Months (in order)...(Jan - Feb - Mar - Apr.)
# y.axis: Metric (avg.spread, avg.effspread, share.w_avg.time - 1 per plot!!)
# Create your groups of size (group 1, 2, 3, 4, 5) and use ggplot2-----
# Use ggplot2 "Legends" function to plot the different groups for each metric plot
#p <- ggplot(newdata, aes(`Size`, `AvgRealizedSpread`)) + geom_point(aes(colour = color))p + guides(col = guide_legend(nrow = 8))
sp <- c()
ye <- c()
supp<-c()
for (zipfile in files2grab) {
exdata <- read.csv(zipfile, header=FALSE, sep="|")
colnames(exdata) <- field.names
newdata <-subset(exdata, !is.na(`ShrWtdAtQuoteTime`))
#unlink(temp)
a<-min(newdata$Size)
b<-max(newdata$Size)
# do some calculations across subgroups and store results
# You can subset the data like so:
#marketableorders.idx <- exdata$Immediacy == 11 | exdata$Immediacy == 12
#mean(exdata$AvgRealizedSpread[marketableorders.idx])
for (i in a:b) {
sp<-c(sp,mean(newdata$ShrWtdAtQuoteTime[newdata$Size == i]))
supp <-c(supp,i)
ye<-c(ye,mean(newdata$CCYYMM))
}
}
#exdata <- read.csv("M200204.dat", header=FALSE, sep="|")
#colnames(exdata) <- field.names
#unlink(temp)
# do some calculations across subgroups and store results
# You can subset the data like so:
df <- data.frame(ShrWtdAtQuoteTime=sp,
date=ye,size=supp)
# Change the color
p<-ggplot(df, aes(x=date, y=ShrWtdAtQuoteTime, color=size,group=size)) +
geom_line(size=1.0)+
geom_point(size=1.0)
p + labs(x = "Date", y = "Time", title = "Share-weighted Avg. Time (Order-to-Execute)") +
scale_color_brewer(palette = "Set1")
#p+scale_color_manual(values=c("green"))
# x.axis: Months (in order)...(Jan - Feb - Mar - Apr.)
# y.axis: Metric (avg.spread, avg.effspread, share.w_avg.time - 1 per plot!!)
# Create your groups of size (group 1, 2, 3, 4, 5) and use ggplot2-----
# Use ggplot2 "Legends" function to plot the different groups for each metric plot
#p <- ggplot(newdata, aes(`Size`, `AvgRealizedSpread`)) + geom_point(aes(colour = color))p + guides(col = guide_legend(nrow = 8))
library(xts)
library(Quandl)
library(quantmod)
library(ggplot2)
library(RColorBrewer)
Quandl.api_key("koK7avVzeTYC4mWdtk6q")
# Get Fixed Income
fi.tickers <- c("CHRIS/MX_CGF1.1", "CHRIS/MX_CGF1.2", "CHRIS/MX_CGB1.1", "CHRIS/MX_CGB1.2")
fi.raw <- Quandl(fi.tickers, type="raw")
fi.colnames <- c("Date", "CGF1 Bid", "CGF1 Ask", "CGB1 Bid", "CGB1 Ask")
colnames(fi.raw) <- fi.colnames
# Filter out missing bid/ask prices
newdata <-subset(fi.raw, `CGF1 Bid`>0&`CGF1 Ask`>0&`CGB1 Bid`>0&`CGB1 Ask`>0,
select = c(`Date`, `CGF1 Bid`, `CGF1 Ask`, `CGB1 Bid`, `CGB1 Ask`))
# Create spreads
newdata$CGF1.spread <- newdata$`CGF1 Ask`- newdata$`CGF1 Bid`
newdata$CGB1.spread <- newdata$`CGB1 Ask`- newdata$`CGB1 Bid`
# Create fractional spreads
newdata$CGF1.fracspread <- log(newdata$`CGF1 Ask`) - log(newdata$`CGF1 Bid`)
newdata$CGB1.fracspread <- log(newdata$`CGB1 Ask`) - log(newdata$`CGB1 Bid`)
# reorder data columns
fi.all <- newdata[c(1,2,3,6,8,4,5,7,9)]
# Commodities
commodities.tickers <- c("LME/PR_CU.1", "LME/PR_CU.2", "LME/PR_AL.1", "LME/PR_AL.2", "LME/PR_TN.1", "LME/PR_TN.2")
commodities.raw <- Quandl(commodities.tickers, type="raw")
commodities.colnames <- c("Date", "CU.buy", "CU.sell", "AL.buy", "AL.sell", "TN.buy", "TN.sell")
colnames(commodities.raw) <- commodities.colnames
# Filter out missing bid/ask prices
newcom <- subset(commodities.raw, `CU.buy`>0&`CU.sell`>0&`AL.buy`>0&`AL.sell`>0&`TN.buy`>0&`TN.sell`>0,
select = c(`Date`, `CU.buy`, `CU.sell`, `AL.buy`, `AL.sell`, `TN.buy`, `TN.sell`))
# Spreads
# Fucked up on this. need to switch to = SELL - BUY. My bad.
newcom$CU.spread <- newcom$`CU.sell`- newcom$`CU.buy`
newcom$AL.spread <- newcom$`AL.sell`- newcom$`AL.buy`
newcom$TN.spread <- newcom$`TN.sell`- newcom$`TN.buy`
newcom$CU.fracspread <- log(newcom$`CU.sell`) - log(newcom$`CU.buy`)
newcom$AL.fracspread <- log(newcom$`AL.sell`) - log(newcom$`AL.buy`)
newcom$TN.fracspread <- log(newcom$`TN.sell`) - log(newcom$`TN.buy`)
commodities.all <- newcom[c(1,2,3,8,11,4,5,9,12,6,7,10,13)]
# Equity Indices
idx.tickers <- c("CHRIS/HKEX_HSI1.2", "CHRIS/HKEX_HSI1.3", "CHRIS/MX_SXM1.1", "CHRIS/MX_SXM1.2")
idx.raw <- Quandl(idx.tickers, type="raw")
idx.colnames <- c("Date", "HSI.bid", "HSI.ask", "TSX.bid", "TSX.ask")
colnames(idx.raw) <- idx.colnames
# Filter out missing bid/ask prices
idx.new <- subset(idx.raw, `HSI.bid`>0&`HSI.ask`>0&`TSX.bid`>0&`TSX.ask`>0,
select = c(`Date`, `HSI.bid`, `HSI.ask`, `TSX.bid`, `TSX.ask`))
# Spreads
idx.new$HSI.spread <- idx.new$`HSI.ask`- idx.new$`HSI.bid`
idx.new$TSX.spread <- idx.new$`TSX.ask`- idx.new$`TSX.bid`
idx.new$HSI.fracspread <- log(idx.new$`HSI.ask`) - log(idx.new$`HSI.bid`)
idx.new$TSX.fracspread <- log(idx.new$`TSX.ask`) - log(idx.new$`TSX.bid`)
# TODO - CHECK COLUMN ORDERING
idx.all <- idx.new[c(1,2,3,6,8,4,5,7,9)]
# FX Rates
fx.tickers <- c("BITFINEX/BTCUSD.5","BITFINEX/BTCUSD.6")
fx.raw <- Quandl(fx.tickers, type="raw")
fx.colnames <- c("Date", "Bit.bid", "Bit.ask")
colnames(fx.raw) <- fx.colnames
# Filter out missing bid/ask prices
fx.new <- subset(fx.raw, `Bit.bid`>0&`Bit.ask`>0,
select = c(`Date`, `Bit.bid`, `Bit.ask`))
# Spreads
fx.new$HSI.spread <- fx.new$`Bit.ask`- fx.new$`Bit.bid`
fx.new$HSI.fracspread <- log(fx.new$`Bit.ask`) - log(fx.new$`Bit.bid`)
fx.all <- fx.new
# Equity
shortvol.tickers <- c("FINRA/FNSQ_AMD.1", "FINRA/FNSQ_RGR.1", "FINRA/FNSQ_TSLA.1")
shortvol.raw <- Quandl(shortvol.tickers, type="xts")
colnames(shortvol.raw) <- c("AMD.shortvol", "RGR.shortvol", "TSLA.shortvol")
eq.tickers <- c("AMD", "RGR", "TSLA")
tmp <- getSymbols(eq.tickers[1], src="yahoo", env=NULL)
adj.col <- last(colnames(tmp))
eq.raw <- tmp[,adj.col]                       # What does this line and the for-loop do? I think this line adds the adj close from yahoo to eq.raw?
for (j in 2:length(eq.tickers))               # Not sure about this for-loop, how is this different than lines 50-52?
{
tmp <- getSymbols(eq.tickers[j], src="yahoo", env=NULL)
adj.col <- last(colnames(tmp))
eq.raw <- cbind(eq.raw, tmp[,adj.col])
}
mix.raw <- cbind(eq.raw, shortvol.raw)
mix.new <- subset(mix.raw, `AMD.shortvol`>0&`RGR.shortvol`>0&`TSLA.shortvol`>0&`TSLA.Adjusted`>0&`AMD.Adjusted`>0&`RGR.Adjusted`>0,
select = c(`AMD.shortvol`,`AMD.Adjusted`,`RGR.shortvol`,`RGR.Adjusted`,`TSLA.shortvol`,`TSLA.Adjusted`))
fi.all <- subset(fi.all, Date > as.Date("2015-01-01") )
sp <- c()
ye <- c()
supp<-c()
for (v in fi.all[,1]) {
ye <- as.Date( c(ye,v))
}
for (v in fi.all[,1]) {
ye <-as.Date( c(ye,v))
}
for (v in fi.all[,4]) {
sp <- c(sp,v)
}
for (v in fi.all[,8]) {
sp <- c(sp,v)
}
for (v in fi.all[,4]) {
supp <- c(supp,"CGF1")
}
for (v in fi.all[,4]) {
supp <- c(supp,"CGB1")
}
df <- data.frame(spread=sp,
date=ye,type=supp)
# Change the color
p<-ggplot(df, aes(x=date, y=spread, color=type,group=type)) +
geom_line(size=1.0)
p + labs(x = "Year", y = "Spread", title = "CGF1/CGB1 Spreads") +
scale_color_brewer(palette = "Set1")
sp <- c()
for (v in fi.all[,5]) {
sp <- c(sp,v)
}
for (v in fi.all[,9]) {
sp <- c(sp,v)
}
df <- data.frame(frac=sp,
date=ye,type=supp)
# Change the color
p<-ggplot(df, aes(x=date, y=frac, color=type,group=type)) +
geom_line(size=1.0)
p + labs(x = "Year", y = "Spread", title = "CGF1/CGB1 Fractional Spreads") +
scale_color_brewer(palette = "Set2")
commodities.all <- subset(commodities.all, Date > as.Date("2015-01-01") )
sp <- c()
ye <- c()
supp<-c()
for (v in commodities.all[,1]) {
ye <- as.Date( c(ye,v))
}
for (v in commodities.all[,1]) {
ye <-as.Date( c(ye,v))
}
for (v in commodities.all[,1]) {
ye <-as.Date( c(ye,v))
}
for (v in commodities.all[,4]) {
sp <- c(sp,v)
}
for (v in commodities.all[,8]) {
sp <- c(sp,v)
}
for (v in commodities.all[,12]) {
sp <- c(sp,v)
}
for (v in commodities.all[,4]) {
supp <- c(supp,"CU")
}
for (v in commodities.all[,4]) {
supp <- c(supp,"AL")
}
for (v in commodities.all[,4]) {
supp <- c(supp,"TN")
}
df <- data.frame(spread=sp,
date=ye,type=supp)
# Change the color
p<-ggplot(df, aes(x=date, y=spread, color=type,group=type)) +
geom_line(size=1.0)
p + labs(x = "Year", y = "Spread", title = "CU/AL/TN Spreads") +
scale_color_brewer(palette = "Set1")
sp <- c()
for (v in commodities.all[,5]) {
sp <- c(sp,v)
}
for (v in commodities.all[,9]) {
sp <- c(sp,v)
}
for (v in commodities.all[,13]) {
sp <- c(sp,v)
}
df <- data.frame(frac=sp,
date=ye,type=supp)
# Change the color
p<-ggplot(df, aes(x=date, y=frac, color=type,group=type)) +
geom_line(size=1.0)
p + labs(x = "Year", y = "Spread", title = "CU/AL/TN Fractional Spreads") +
scale_color_brewer(palette = "Set2")
#+ scale_color_gradientn(colours = rainbow(3))
# once dataframes are loaded, use the cbind function to combine/bind this with shortvol.raw
# (maybe create a new array entirely?)
# Syntax: eq.new1 <- cbind(shortvol.raw, adj.close[, ????????])
idx.all <- subset(idx.all, Date > as.Date("2015-01-01") )
sp <- c()
ye <- c()
supp<-c()
for (v in idx.all[,1]) {
ye <- as.Date( c(ye,v))
}
for (v in idx.all[,1]) {
ye <-as.Date( c(ye,v))
}
for (v in idx.all[,4]) {
sp <- c(sp,v)
}
for (v in idx.all[,8]) {
sp <- c(sp,v)
}
for (v in idx.all[,4]) {
supp <- c(supp,"HSI")
}
for (v in idx.all[,4]) {
supp <- c(supp,"TSX 60")
}
df <- data.frame(spread=sp,
date=ye,type=supp)
# Change the color
p<-ggplot(df, aes(x=date, y=spread, color=type,group=type)) +
geom_line(size=1.0)
p + labs(x = "Year", y = "Spread", title = "HSI/TSX60 Spreads") +
scale_color_brewer(palette = "Set1")
sp <- c()
for (v in idx.all[,5]) {
sp <- c(sp,v)
}
for (v in idx.all[,9]) {
sp <- c(sp,v)
}
df <- data.frame(frac=sp,
date=ye,type=supp)
# Change the color
p<-ggplot(df, aes(x=date, y=frac, color=type,group=type)) +
geom_line(size=1.0)
p + labs(x = "Year",y = "Spread", title = "HSI/TSX60 Fractional Spreads") +
scale_color_brewer(palette = "Set2")
fx.all <- subset(fx.all, Date > as.Date("2015-01-01") )
sp <- c()
ye <- c()
supp<-c()
for (v in fx.all[,1]) {
ye <- as.Date( c(ye,v))
}
for (v in fx.all[,4]) {
sp <- c(sp,v)
}
for (v in fx.all[,4]) {
supp <- c(supp,"Bit")
}
df <- data.frame(spread=sp,
date=ye,type=supp)
# Change the color
p<-ggplot(df, aes(x=date, y=spread, color=type,group=type)) +
geom_line(size=1.0)
p + labs(x = "Year", y = "Spread", title = "BITFINEX/BTCUSD Spread") +
scale_color_brewer(palette = "Set1")
sp <- c()
for (v in fx.all[,5]) {
sp <- c(sp,v)
}
df <- data.frame(frac=sp,
date=ye,type=supp)
# Change the color
p<-ggplot(df, aes(x=date, y=frac, color=type,group=type)) +
geom_line(size=1.0)
p + labs(x = "Year", y = "Spread", title = "BITFINEX/BTCUSD Fractional Spread") +
scale_color_brewer(palette = "Set2")
mix.new <- mix.new["2014/"]
#mix.new <- subset(mix.new, Date > as.Date("2015-01-01") )
sp <- c()
ye <- c()
supp<-c()
for (v in index(mix.new)) {
ye <- as.Date( c(ye,v))
supp <- c(supp,"AMD")
}
for (v in index(mix.new)) {
ye <- as.Date( c(ye,v))
supp <- c(supp,"RGR")
}
for (v in index(mix.new)) {
ye <- as.Date( c(ye,v))
supp <- c(supp,"TSLA")
}
for (v in mix.new[,2]) {
sp <- c(sp,v)
}
for (v in mix.new[,4]) {
sp <- c(sp,v)
}
for (v in mix.new[,6]) {
sp <- c(sp,v)
}
df <- data.frame(Adjusted=sp,
date=ye,type=supp)
# Change the color
p<-ggplot(df, aes(x=date, y=Adjusted, color=type,group=type)) +
geom_line(size=1.0)
p + labs(x = "Year", y = "Price", title = "AMD/RGR/TSLA Adj. Closing Prices") +
scale_color_brewer(palette = "Set1")
sp <- c()
for (v in mix.new[,1]) {
sp <- c(sp,v)
}
for (v in mix.new[,3]) {
sp <- c(sp,v)
}
for (v in mix.new[,5]) {
sp <- c(sp,v)
}
df <- data.frame(shortv=sp,
date=ye,type=supp)
# Change the color
p<-ggplot(df, aes(x=date, y=shortv, color=type,group=type)) +
geom_line(size=1.0)
p + labs(x = "Year", y = "Short Vol.", title = "AMD/RGR/TSLA Short Volume") +
scale_color_brewer(palette = "Set2")
View(commodities.all)
View(commodities.all)
load("C:/Users/jloss/OneDrive - University of Illinois - Urbana/FIN500/HW1/.RData")
load("C:/Users/jloss/OneDrive - University of Illinois - Urbana/FY 2018-2019/Fall 2018/FIN500/HW1/.RData")
